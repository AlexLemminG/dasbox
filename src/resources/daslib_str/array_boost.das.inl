//
// AUTO-GENERATED FILE - DO NOT EDIT!!
//

"options indenting = 4\n"
"options no_unused_block_arguments = false\n"
"options no_unused_function_arguments = false\n"
"options no_aot = true\n"
"\n"
"module array_boost shared public\n"
"\n"
"require daslib/templates\n"
"require daslib/contracts\n"
"\n"
"[unsafe_operation, template (a), unused_argument(a)]\n"
"def private array_helper ( var arr : auto implicit =const; a : auto(TT) ) : arra"
"y<TT -const-#>\n"
"    var res : array<TT -const-#>\n"
"    let lenA = length(arr)\n"
"    if lenA>=1\n"
"        unsafe\n"
"            _builtin_make_temp_array(res, addr(arr[0]), lenA)\n"
"    return <- res\n"
"\n"
"[unsafe_operation, template (a), unused_argument(a)]\n"
"def private array_helper ( arr : auto implicit =const; a : auto(TT) ) : array<TT"
" -const-#>\n"
"    var res : array<TT -const-#>\n"
"    let lenA = length(arr)\n"
"    if lenA>=1\n"
"        unsafe\n"
"            _builtin_make_temp_array(res, addr(arr[0]), lenA)\n"
"    return <- res\n"
"\n"
"[unsafe_operation]\n"
"def public temp_array ( var arr : auto implicit =const )\n"
"    unsafe\n"
"        return <- array_helper ( arr, decltype(arr[0]) )\n"
"\n"
"[unsafe_operation]\n"
"def public temp_array ( arr : auto implicit =const)\n"
"    unsafe\n"
"        return <- array_helper ( arr, decltype(arr[0]) )\n"
"\n"
"[expect_any_array(v)]\n"
"def empty(v:auto(VecT))\n"
"    return _::length(v)==0\n"
