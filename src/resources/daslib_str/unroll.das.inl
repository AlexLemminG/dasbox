//
// AUTO-GENERATED FILE - DO NOT EDIT!!
//

"options indenting = 4\n"
"options no_unused_block_arguments = false\n"
"options no_unused_function_arguments = false\n"
"options no_aot = true\n"
"\n"
"module unroll shared private\n"
"\n"
"require ast\n"
"require rtti\n"
"require daslib/ast_boost\n"
"require daslib/templates_boost\n"
"\n"
"[tag_function(unroll_tag)]\n"
"def public unroll ( blk : block )\n"
"    invoke(blk)\n"
"\n"
"class private RemoveDerefVisitor : AstVisitor\n"
"    vname : string\n"
"    def RemoveDerefVisitor ( n : string )\n"
"        vname = n\n"
"    def override visitExprRef2Value(expr:smart_ptr<ExprRef2Value>) : ExpressionP"
"tr\n"
"        if expr.subexpr is ExprVar\n"
"            let vvar = expr.subexpr as ExprVar\n"
"            if \"{vvar.name}\"==vname\n"
"                return clone_expression(expr.subexpr)\n"
"        return expr\n"
"\n"
"def remove_deref ( varname : string; var expr:smart_ptr<Expression> )\n"
"    var astVisitor = new RemoveDerefVisitor(varname)\n"
"    var astVisitorAdapter <- make_visitor(*astVisitor)\n"
"    expr |> visit(astVisitorAdapter)\n"
"    unsafe\n"
"        delete astVisitor\n"
"    astVisitorAdapter := null\n"
"\n"
"[tag_function_macro(tag=\"unroll_tag\")]\n"
"class UnrollMacro : AstFunctionAnnotation\n"
"    def override transform ( var call : smart_ptr<ExprCallFunc>; var errors : da"
"s_string ) : ExpressionPtr\n"
"        assert(call.arguments[0] is ExprMakeBlock)\n"
"        unsafe\n"
"            var mblk = reinterpret<ExprMakeBlock?> call.arguments[0]\n"
"            var blk = reinterpret<ExprBlock?> mblk._block\n"
"            if blk.finalList.length != 0\n"
"                errors := \"not expecting finally section in the unroll\"\n"
"                return [[ExpressionPtr]]\n"
"            if blk.list.length != 1 || !(blk.list[0] is ExprFor)\n"
"                errors := \"expecting unroll <| for ...\"\n"
"                return [[ExpressionPtr]]\n"
"            let efor = reinterpret<ExprFor?> blk.list[0]\n"
"            if !(efor.sources[0] is ExprConstRange)\n"
"                errors := \"can only unroll for loop with range\"\n"
"                return [[ExpressionPtr]]\n"
"            let euc = reinterpret<ExprConstRange?> efor.sources[0]\n"
"            let van = \"{efor.iterators[0]}\"\n"
"            var nblk <- new [[ExprBlock() at=call.at]]\n"
"            for i in euc.value\n"
"                var iblk <- clone_expression(efor.body)\n"
"                remove_deref(van, iblk)\n"
"                var rules : Template\n"
"                rules |> replaceVariable(van) <| new [[ExprConstInt() at=call.at"
", value=i]]\n"
"                rules |> apply_template(call.at,iblk,false)\n"
"                nblk.list |> emplace(iblk)\n"
"            return nblk\n"
"\n"
