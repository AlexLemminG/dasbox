//
// AUTO-GENERATED FILE - DO NOT EDIT!!
//

"options indenting = 4\n"
"options no_unused_block_arguments = false\n"
"options no_unused_function_arguments = false\n"
"\n"
"module strings_boost shared public\n"
"\n"
"require strings public\n"
"\n"
"def wide (text:string; width:int)\n"
"    let extra = width - length(text)\n"
"    if extra > 0\n"
"        return text + repeat(\" \",extra)\n"
"    else\n"
"        return text\n"
"\n"
"\n"
"def join(it; separator:string)\n"
"    static_if !typeinfo(is_iterable it)\n"
"        concept_assert(false,\"can't join non-iterable type\")\n"
"        return \"\"\n"
"    else\n"
"        let st = build_string() <| $ (var writer)\n"
"            var skip_first = true\n"
"            for elem in it\n"
"                if skip_first\n"
"                    skip_first = false\n"
"                else\n"
"                    write(writer, separator)\n"
"                if typeinfo(is_string it)\n"
"                    write_char(writer, elem)\n"
"                else\n"
"                    write(writer, elem)\n"
"        return st\n"
"\n"
"def split ( text, delim : string; blk : block< (arg:array<string>#) > )\n"
"    builtin_string_split ( text, delim, blk )\n"
"\n"
"def split ( text, delim : string ) : array<string>\n"
"    var res : array<string>\n"
"    builtin_string_split(text, delim) <| $ ( arr : array<string># ) : void\n"
"        res := arr\n"
"    return <- res\n"
"\n"
"def split_by_chars ( text, delim : string; blk : block< (arg:array<string>#) > )"
"\n"
"    builtin_string_split_by_char ( text, delim, blk )\n"
"\n"
"def split_by_chars ( text, delim : string ) : array<string>\n"
"    var res : array<string>\n"
"    builtin_string_split_by_char (text, delim) <| $ ( arr : array<string># ) : v"
"oid\n"
"        res := arr\n"
"    return <- res\n"
"\n"
"[generic]\n"
"def is_character_at(foo:array<uint8>#; idx:int; ch:int)\n"
"    return int(foo[idx])==ch\n"
"\n"
"[generic]\n"
"def eq ( a:string; b:das_string )\n"
"    var res : bool\n"
"    peek(b) <| $ ( B )\n"
"        res = a==B\n"
"    return res\n"
"\n"
"[generic]\n"
"def eq ( b:das_string; a:string )\n"
"    var res : bool\n"
"    peek(b) <| $ ( B )\n"
"        res = a==B\n"
"    return res\n"
"\n"
