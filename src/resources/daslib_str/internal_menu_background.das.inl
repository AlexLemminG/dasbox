//
// AUTO-GENERATED FILE - DO NOT EDIT!!
//

"include daslib/media\n"
"\n"
"\n"
"var\n"
"    background_gradient: Image\n"
"    background_godrays: Image\n"
"\n"
"\n"
"def background_initialize()\n"
"    let buf <- [{\n"
"        for i in range(64 * 64);\n"
"        make_color(\n"
"            0.5 * sin(float(i / 64) * 0.03 + 0.1),\n"
"            0.8 * sin(float(i % 64) * 0.03 + 0.2),\n"
"            sin(float(i / 64 + i % 64) * 0.03 + 0.3),\n"
"            1.0 - length(float2(float((i / 64 - 32)) * 0.035, float((i % 64) - 3"
"2) * 0.035))\n"
"            )\n"
"        }]\n"
"    background_gradient <- create_image(64, 64, buf)\n"
"    background_gradient |> set_image_smooth(true)\n"
"\n"
"    let grad <- [{\n"
"        for i in range(64 * 64);\n"
"        make_color(1.0, 1.0, 1.0, float(i / 64) * (1.0 / 64.0) -\n"
"            float(((i * (23459 + i)) ^ 345) & 15) / 16.0 * 0.2)\n"
"        }]\n"
"    background_godrays <- create_image(64, 64, grad)\n"
"    background_godrays |> set_image_smooth(true)\n"
"\n"
"\n"
"def draw_image_sqewed(img: Image& const; x, y: float; color: uint; sz: float2; s"
"kew: float)\n"
"    img |> draw_quad(\n"
"        float2(x, y),\n"
"        float2(x + skew, y + sz.y),\n"
"        float2(x + sz.x + skew, y + sz.y),\n"
"        float2(x + sz.x, y),\n"
"        color)\n"
"\n"
"\n"
"def background_draw()\n"
"    let sw = float(get_screen_width())\n"
"    let sh = float(get_screen_height())\n"
"    let t = get_time_after_start() * 0.03 - 1200.0\n"
"    let bck_color = make_color(\n"
"        abs(sin(t)), abs(sin(t) + 0.25), abs(sin(t) + 0.5));\n"
"    let fore_color = make_color(\n"
"        abs(sin(t * 0.6)), abs(sin(t * 0.7) + 0.25), abs(sin(t * 0.8) + 0.5), 0."
"32);\n"
"\n"
"    background_gradient |> draw_image(0, 0, bck_color, get_screen_width())\n"
"    enable_alpha_blend()\n"
"    background_godrays |> draw_image_sqewed(0.0, -sh * 0.2, make_color(0.0, 0.0,"
" 0.3, 0.7),\n"
"        float2((2.5 + sin(t * 2.0)) * sw, sh * 1.4), -400.0)\n"
"    background_godrays |> draw_image_sqewed(0.0, -sh * 0.2, make_color(0.0, 0.1,"
" 0.1, 0.6),\n"
"        float2((2.9 + sin(t * 0.6)) * sw, sh * 1.4), -240.0)\n"
"\n"
"    var seed: int4 = int4(20, 50, 60, 70)\n"
"\n"
"    for layer in range(10)\n"
"        let la = 12 - layer\n"
"        for i in range(50)\n"
"            let offset = -float(la) * t * 0.05\n"
"            var pos = float2(random_float(seed), random_float(seed))\n"
"            pos.y += offset\n"
"            pos.x += sin(t + float(layer) * 0.2)\n"
"            pos.x = pos.x % 1.0\n"
"            pos.y = pos.y % 1.0\n"
"            pos.y += 0.1 * sin(t * 2.0 + float(i) * 0.6)\n"
"            pos = pos * float2(1.4, 1.4) - float2(0.2, 0.2)\n"
"            pos.x *= sw\n"
"            pos.y *= sh\n"
"            let scale = 64.0 / float(layer + 2)\n"
"            background_gradient |> draw_image(pos.x - 5.0, pos.y, 0x1F000000, sc"
"ale)\n"
"            background_gradient |> draw_image(pos.x, pos.y, fore_color, scale)\n"
"\n"
"    background_godrays |> draw_image_sqewed(0.0, -sh * 0.2, make_color(0.0, 0.0,"
" 0.05, 0.3),\n"
"        float2((2.8 + sin(t * 1.3)) * sw, sh * 1.4), -200.0)\n"
