//
// AUTO-GENERATED FILE - DO NOT EDIT!!
//

"require sound\n"
"require dasbox\n"
"require math\n"
"require strings\n"
"\n"
"var private sounds: array<PcmSound>\n"
"var private deleted_sounds: array<int>\n"
"\n"
"\n"
"struct SoundHandle\n"
"    index: int\n"
"    duration: float\n"
"    frequency: int\n"
"    samples: int\n"
"    channels: int\n"
"\n"
"\n"
"def private setup_sound(index: int): SoundHandle\n"
"    var h: SoundHandle\n"
"    h.index = index\n"
"    h.duration = sounds[index].duration\n"
"    h.frequency = sounds[index].frequency\n"
"    h.samples = sounds[index].samples\n"
"    h.channels = sounds[index].channels\n"
"    return h\n"
"\n"
"def private allocate_sound(): int\n"
"    if empty(deleted_sounds)\n"
"        sounds |> reserve(3000)\n"
"        var snd: PcmSound\n"
"        sounds |> emplace(snd)\n"
"        return length(sounds) - 1\n"
"    let res = deleted_sounds |> back()\n"
"    deleted_sounds |> pop()\n"
"    return res\n"
"\n"
"def move_to_managed_storage(var sound: PcmSound &): SoundHandle\n"
"    var i = allocate_sound()\n"
"    sounds[i] <- sound\n"
"    return setup_sound(i)\n"
"\n"
"def clone_to_managed_storage(sound: PcmSound): SoundHandle\n"
"    var i = allocate_sound()\n"
"    sounds[i] := sound\n"
"    return setup_sound(i)\n"
"\n"
"def delete_managed_sound(sound_handle: SoundHandle)\n"
"    if (sound_handle.index > 0 && sounds[sound_handle.index].valid)\n"
"        deleted_sounds |> push(sound_handle.index)\n"
"        delete sounds[sound_handle.index]\n"
"\n"
"def clone_managed_sound(sound_handle: SoundHandle): SoundHandle\n"
"    var i = allocate_sound()\n"
"    sounds[i] := sounds[sound_handle.index]\n"
"    return setup_sound(i)\n"
"\n"
"def create_managed_sound(file_name: string): SoundHandle\n"
"    var i = allocate_sound()\n"
"    sounds[i] <- create_sound(file_name)\n"
"    return setup_sound(i)\n"
"\n"
"def create_managed_sound(frequency: int; data): SoundHandle\n"
"    var i = allocate_sound()\n"
"    sounds[i] <- create_sound(frequency, data)\n"
"    return setup_sound(i)\n"
"\n"
"def set_sound_data(sound_handle: SoundHandle; data)\n"
"    sounds[sound_handle.index] |> set_sound_data(data)\n"
"\n"
"def get_sound_data(sound_handle: SoundHandle; var data: array<float> & implicit)"
"\n"
"    sounds[sound_handle.index] |> get_sound_data(data)\n"
"\n"
"def get_sound_data(sound_handle: SoundHandle; var data: array<float2> & implicit"
")\n"
"    sounds[sound_handle.index] |> get_sound_data(data)\n"
"\n"
"\n"
"def play_sound(sound_handle: SoundHandle): PlayingSoundHandle\n"
"    return sounds[sound_handle.index] |> play_sound()\n"
"\n"
"def play_sound(sound_handle: SoundHandle; volume): PlayingSoundHandle\n"
"    return sounds[sound_handle.index] |> play_sound(volume)\n"
"\n"
"def play_sound(sound_handle: SoundHandle; volume, pitch): PlayingSoundHandle\n"
"    return sounds[sound_handle.index] |> play_sound(volume, pitch)\n"
"\n"
"def play_sound(sound_handle: SoundHandle; volume, pitch, pan): PlayingSoundHandl"
"e\n"
"    return sounds[sound_handle.index] |> play_sound(volume, pitch, pan)\n"
"\n"
"def play_sound(sound_handle: SoundHandle; volume, pitch, pan, start_time, stop_t"
"ime): PlayingSoundHandle\n"
"    return sounds[sound_handle.index] |> play_sound(volume, pitch, pan, start_ti"
"me, stop_time)\n"
"\n"
"def play_sound_loop(sound_handle: SoundHandle; volume): PlayingSoundHandle\n"
"    return sounds[sound_handle.index] |> play_sound_loop(volume)\n"
"\n"
"def play_sound_loop(sound_handle: SoundHandle; volume, pitch): PlayingSoundHandl"
"e\n"
"    return sounds[sound_handle.index] |> play_sound_loop(volume, pitch)\n"
"\n"
"def play_sound_loop(sound_handle: SoundHandle; volume, pitch, pan): PlayingSound"
"Handle\n"
"    return sounds[sound_handle.index] |> play_sound_loop(volume, pitch, pan)\n"
"\n"
"def play_sound_loop(sound_handle: SoundHandle; volume, pitch, pan, start_time, s"
"top_time): PlayingSoundHandle\n"
"    return sounds[sound_handle.index] |> play_sound_loop(volume, pitch, pan, sta"
"rt_time, stop_time)\n"
"\n"
"def play_sound_deferred(sound_handle: SoundHandle; volume): PlayingSoundHandle\n"
"    return sounds[sound_handle.index] |> play_sound_deferred(volume)\n"
"\n"
"def play_sound_deferred(sound_handle: SoundHandle; volume, pitch): PlayingSoundH"
"andle\n"
"    return sounds[sound_handle.index] |> play_sound_deferred(volume, pitch)\n"
"\n"
"def play_sound_deferred(sound_handle: SoundHandle; volume, pitch, pan): PlayingS"
"oundHandle\n"
"    return sounds[sound_handle.index] |> play_sound_deferred(volume, pitch, pan)"
"\n"
"\n"
"def play_sound_deferred(sound_handle: SoundHandle; volume, pitch, pan, start_tim"
"e, stop_time): PlayingSoundHandle\n"
"    return sounds[sound_handle.index] |> play_sound_deferred(volume, pitch, pan,"
" start_time, stop_time)\n"
"\n"
