//
// AUTO-GENERATED FILE - DO NOT EDIT!!
//

"options no_unused_block_arguments = false\n"
"options no_unused_function_arguments = false\n"
"options indenting = 4\n"
"\n"
"module regex_boost shared private\n"
"\n"
"require ast\n"
"require strings\n"
"require daslib/ast_boost\n"
"require daslib/regex\n"
"\n"
"[reader_macro(name=\"regex\")]\n"
"class RegexReader : AstReaderMacro\n"
"    def override accept ( prog:ProgramPtr; mod:Module?; var expr:ExprReader?; ch"
":int; info:LineInfo ) : bool\n"
"        if ch!='\\n' && ch!='\\r'\n"
"            append(expr.sequence,ch)\n"
"        if ends_with(expr.sequence,\"%%\")\n"
"            let len = length(expr.sequence)\n"
"            resize(expr.sequence,len-2)\n"
"            return false\n"
"        else\n"
"            return true\n"
"    def override visit ( prog:ProgramPtr; mod:Module?; expr:smart_ptr<ExprReader"
"> ) : ExpressionPtr\n"
"        var regex:Regex\n"
"        regex_compile(regex,\"{expr.sequence}\")\n"
"        if !is_valid(regex)\n"
"            delete regex\n"
"            macro_error(prog,expr.at,\"regular expression did not compile\")\n"
"            return [[ExpressionPtr]]\n"
"        // TODO: turn into AOT?\n"
"        var re_data <- convert_to_expression(regex,expr.at)\n"
"        delete regex\n"
"        var creg <- new [[ExprCall() at=expr.at, name:=\"regex::regex_compile\"]]\n"
"        emplace(creg.arguments,re_data)\n"
"        return creg\n"
