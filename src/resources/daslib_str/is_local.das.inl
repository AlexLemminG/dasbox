//
// AUTO-GENERATED FILE - DO NOT EDIT!!
//

"options indenting = 4\n"
"options no_unused_block_arguments = false\n"
"options no_unused_function_arguments = false\n"
"options no_aot = true\n"
"\n"
"module is_local shared public\n"
"\n"
"require ast public\n"
"require rtti\n"
"require daslib/ast_boost\n"
"\n"
"def is_local_expr ( expr:ExpressionPtr )\n"
"    if expr is ExprVar\n"
"        return (expr as ExprVar).varFlags.local\n"
"    elif expr is ExprAt\n"
"        let ea = expr as ExprAt\n"
"        if ea.subexpr._type!=null && ea.subexpr._type.dim.length!=0\n"
"            return is_local_expr(ea.subexpr)\n"
"    elif expr is ExprField\n"
"        let ef = expr as ExprField\n"
"        if !(ef.value._type.baseType==Type tHandle) || (ef.value._type.isLocal)\n"
"            return is_local_expr(ef.value)\n"
"    elif expr is ExprSwizzle\n"
"        return is_local_expr((expr as ExprSwizzle).value)\n"
"    return false\n"
"\n"
"def is_local_or_global_expr ( expr:ExpressionPtr )\n"
"    if expr is ExprVar\n"
"        let ev = expr as ExprVar\n"
"        return ev.varFlags.local || !(ev.varFlags.argument || ev.varFlags._block"
")\n"
"    elif expr is ExprAt\n"
"        let ea = expr as ExprAt\n"
"        if ea.subexpr._type!=null && ea.subexpr._type.dim.length!=0\n"
"            return is_local_or_global_expr(ea.subexpr)\n"
"    elif expr is ExprField\n"
"        let ef = expr as ExprField\n"
"        if !(ef.value._type.baseType==Type tHandle) || (ef.value._type.isLocal)\n"
"            return is_local_or_global_expr(ef.value)\n"
"    elif expr is ExprSwizzle\n"
"        let ef = expr as ExprSwizzle\n"
"        return is_local_or_global_expr(ef.value)\n"
"    return false\n"
"\n"
"def is_scope_expr ( expr:ExpressionPtr )\n"
"    if expr is ExprVar\n"
"        return true\n"
"    elif expr is ExprAt\n"
"        let ea = expr as ExprAt\n"
"        if ea.subexpr._type!=null && ea.subexpr._type.dim.length!=0\n"
"            return is_scope_expr(ea.subexpr)\n"
"    elif expr is ExprField\n"
"        let ef = expr as ExprField\n"
"        if !(ef.value._type.baseType==Type tHandle) || (ef.value._type.isLocal)\n"
"            return is_scope_expr(ef.value)\n"
"    elif expr is ExprSwizzle\n"
"        let ef = expr as ExprSwizzle\n"
"        return is_scope_expr(ef.value)\n"
"    return false\n"
