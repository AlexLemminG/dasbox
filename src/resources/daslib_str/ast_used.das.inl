//
// AUTO-GENERATED FILE - DO NOT EDIT!!
//

"options indenting = 4\n"
"options no_unused_block_arguments = false\n"
"options no_unused_function_arguments = false\n"
"options no_aot = true\n"
"\n"
"module ast_used shared private\n"
"\n"
"require daslib/ast_boost\n"
"\n"
"struct public OnlyUsedTypes\n"
"    st : table<Structure?;bool>\n"
"    en : table<Enumeration?;bool>\n"
"\n"
"class TypeVisitor : AstVisitor\n"
"    usedTypes : OnlyUsedTypes\n"
"    def TypeVisitor\n"
"        pass\n"
"    def collect ( typ:TypeDeclPtr )\n"
"        unsafe\n"
"            if typ.baseType==Type tStructure\n"
"                if usedTypes.st |> key_exists(reinterpret<Structure?> typ.struct"
"Type)\n"
"                    return\n"
"            if typ.structType != null\n"
"                usedTypes.st[reinterpret<Structure?> typ.structType] = true\n"
"                for fld in typ.structType.fields\n"
"                    self->collect ( fld._type )\n"
"            if typ.enumType != null\n"
"                usedTypes.en[reinterpret<Enumeration?> typ.enumType] = true\n"
"        if typ.firstType != null\n"
"            self->collect ( typ.firstType )\n"
"        if typ.secondType != null\n"
"            self->collect ( typ.secondType )\n"
"        for arg in typ.argTypes\n"
"            self->collect ( arg )\n"
"    def override preVisitTypeDecl(typ:TypeDeclPtr) : void\n"
"        self->collect(typ)\n"
"\n"
"def public collect_used_types(vfun:array<Function?>; vvar:array<Variable?>; blk:"
"block<(usedTypes:OnlyUsedTypes):void>)\n"
"    var astVisitor = new TypeVisitor()\n"
"    var astVisitorAdapter <- make_visitor(*astVisitor)\n"
"    for f in vfun\n"
"        unsafe\n"
"            visit(reinterpret<FunctionPtr> f, astVisitorAdapter)\n"
"    for v in vvar\n"
"        astVisitor->collect(v._type)\n"
"    invoke(blk, astVisitor.usedTypes)\n"
"    astVisitorAdapter := null\n"
"    unsafe\n"
"        delete astVisitor\n"
