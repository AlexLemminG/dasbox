//
// AUTO-GENERATED FILE - DO NOT EDIT!!
//

"options indenting = 4\n"
"options no_unused_block_arguments = false\n"
"options no_unused_function_arguments = false\n"
"options no_aot\n"
"\n"
"module decs_state shared private\n"
"\n"
"require daslib/decs\n"
"require daslib/strings_boost\n"
"require debugapi\n"
"\n"
"def report_to_debugger ( var ctx:Context; category,name:string; value:auto(TT) )"
"\n"
"    let tinfo = typeinfo(rtti_typeinfo value)\n"
"    let pdata = unsafe(addr(value))\n"
"    report_context_state(ctx, category, name, unsafe(addr(tinfo)), pdata)\n"
"\n"
"struct EcsRequestView\n"
"    hash        : uint\n"
"    REQUIRE     : string\n"
"    REQUIRE_NOT : string\n"
"    archetype   : array<uint>\n"
"    file        : string\n"
"    line        : int\n"
"\n"
"struct EcsComponentView\n"
"    name        : string\n"
"    vtype       : string\n"
"    values      : string\n"
"    stride      : int\n"
"\n"
"struct EcsArchetypeView\n"
"    hash        : uint\n"
"    size        : int\n"
"    components  : array<EcsComponentView>\n"
"\n"
"class ContextStateAgent : DapiDebugAgent\n"
"    def override onCollect(var ctx:Context)\n"
"        let pState = unsafe(get_context_global_variable(ctx, \"decsState\"))\n"
"        if pState == null\n"
"            return\n"
"        let decsState = unsafe(reinterpret<DecsState? const> (pState))\n"
"        for arch in decsState.allArchetypes\n"
"            var arq : EcsArchetypeView\n"
"            arq.hash = arch.hash\n"
"            arq.size = arch.size\n"
"            for c in arch.components\n"
"                var cv : EcsComponentView\n"
"                cv.name = c.name\n"
"                cv.vtype = c.info.fullName\n"
"                cv.stride = c.stride\n"
"                if length(c.data) > 0\n"
"                    var tinfo : TypeInfo const?\n"
"                    let fnTypeInfo = c.info.mkTypeInfo\n"
"                    unsafe\n"
"                        invoke_in_context(ctx) <| @ [[&tinfo]]\n"
"                            tinfo = invoke(fnTypeInfo)\n"
"                    var arr : array<uint8>\n"
"                    unsafe(_builtin_make_temp_array(arr, unsafe(addr(c.data[0]))"
", arch.size ))\n"
"                    cv.values = sprint_data(unsafe(addr(arr)), tinfo, print_flag"
"s humanReadable)\n"
"                arq.components |> push(cv)\n"
"            report_to_debugger(ctx, \"DECS archetype\", \"{arq.hash}\", arq)\n"
"            delete arq\n"
"        // report entity requests, pretty version\n"
"        for eq in decsState.ecsQueries\n"
"            var prq : EcsRequestView\n"
"            prq.file = eq.at.file\n"
"            prq.line = int(eq.at.line)\n"
"            prq.hash = eq.hash\n"
"            if !empty(eq.req)\n"
"                prq.REQUIRE = join(eq.req,\",\")\n"
"            if !empty(eq.reqn)\n"
"                prq.REQUIRE_NOT = join(eq.reqn,\",\")\n"
"            prq.archetype <- [{for a in eq.archetypes; decsState.allArchetypes[a"
"].hash}]\n"
"            report_to_debugger(ctx, \"DECS requests\", \"{prq.hash}\", prq)\n"
"            delete prq\n"
"\n"
"\n"
"[export]\n"
"def decs_state_agent ( ctx : Context )\n"
"    install_new_debug_agent(new ContextStateAgent(), \"decs\")\n"
"\n"
"[init,export]\n"
"def private auto_start_decs_state()\n"
"    if !is_in_debug_agent_creation()\n"
"        if !has_debug_agent_context(\"decs\")\n"
"            fork_debug_agent_context(@@decs_state_agent)\n"
