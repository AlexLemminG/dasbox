//
// AUTO-GENERATED FILE - DO NOT EDIT!!
//

"options indenting = 4\n"
"options no_unused_block_arguments = false\n"
"options no_unused_function_arguments = false\n"
"options no_aot = true\n"
"\n"
"module instance_function shared private\n"
"\n"
"require ast\n"
"require rtti\n"
"require daslib/ast_boost\n"
"require daslib/templates_boost\n"
"require daslib/defer\n"
"require strings\n"
"\n"
"// [instance_function(generic_name,type1=type1r,type2=type2r,...)]\n"
"class InstanceFunctionAnnotation : AstFunctionAnnotation\n"
"    def override apply ( var func:FunctionPtr; var group:ModuleGroup; args:Annot"
"ationArgumentList; var errors : das_string ) : bool\n"
"        var generic_name = \"\"\n"
"        var rules : Template\n"
"        defer_delete(rules)\n"
"        for argv in args\n"
"            let val = get_annotation_argument_value(argv)\n"
"            if val is tBool\n"
"                if !empty(generic_name)\n"
"                    errors := \"unexpected {argv.name}, name of the generic or fu"
"nction is already specified as {generic_name}\"\n"
"                    return false\n"
"                generic_name = \"{argv.name}\"\n"
"            elif val is tString\n"
"                rules |> replaceType(\"{argv.name}\", \"{val as tString}\")\n"
"            else\n"
"                errors := \"invalid argument type {argv.name}\"\n"
"                return false\n"
"        if empty(generic_name)\n"
"            errors := \"expecting name of the generic or function\"\n"
"            return false\n"
"        var fn <- compiling_module() |> find_unique_generic(generic_name)\n"
"        if fn == null\n"
"            errors := \"generic not found {generic_name}\"\n"
"            return false\n"
"        func.body := null\n"
"        unsafe\n"
"            func.body <- clone_expression(fn.body)\n"
"        apply_template(rules, func.at, func.body)\n"
"        return true\n"
"\n"
"[macro]\n"
"def init\n"
"    if is_compiling_macros_in_module(\"instance_function\")\n"
"        add_new_function_annotation(\"instance_function\", new InstanceFunctionAnn"
"otation())\n"
